/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/check": {
    /**
     * Check availability
     * @description Check the current availability of the stream.
     */
    get: operations["CheckCheck"];
  };
  "/ping": {
    /**
     * Ping
     * @description Do nothing.
     */
    get: operations["PingPing"];
  };
  "/reserve": {
    /**
     * Reserve a stream
     * @description Reserve a stream to be able to go live.
     */
    post: operations["ReserveReserve"];
  };
  "/sse": {
    /**
     * Get SSE stream
     * @description Get a stream of Server-Sent Events.
     */
    get: operations["SseSubscribe"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Availability */
    Availability: {
      /**
       * Availability.Event
       * @description Identifier of the event that is currently on air.
       */
      event?: null | string;
      /**
       * Availability.CheckedAt
       * @description Time in UTC at which the availability was checked.
       */
      checkedAt: unknown;
    };
    /** ReserveRequest */
    ReserveRequest: {
      /**
       * Request.Event
       * Format: uuid
       * @description Identifier of the event to reserve the stream for.
       */
      event: string;
      /**
       * Request.Format
       * @description Format of the audio stream.
       * @constant
       */
      format?: "ogg";
      /**
       * Request.Record
       * @description Whether to record the stream.
       */
      record?: boolean;
    };
    /** ReserveResponse */
    ReserveResponse: {
      credentials: components["schemas"]["Credentials"];
      /**
       * Response.Port
       * @description Port to use to connect to the stream.
       */
      port: number;
    };
    /**
     * Credentials
     * @description Credentials to use to connect to the stream.
     */
    Credentials: {
      /**
       * Credentials.Token
       * @description Token to use to connect to the stream.
       */
      token: string;
      /**
       * Credentials.ExpiresAt
       * @description Time in UTC at which the token expires if not used.
       */
      expiresAt: unknown;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Check availability
   * @description Check the current availability of the stream.
   */
  CheckCheck: {
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {};
        content: {
          "application/json": components["schemas"]["Availability"];
        };
      };
    };
  };
  /**
   * Ping
   * @description Do nothing.
   */
  PingPing: {
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          "cache-control"?: string;
        };
        content: {
          "application/json": null;
        };
      };
    };
  };
  /**
   * Reserve a stream
   * @description Reserve a stream to be able to go live.
   */
  ReserveReserve: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReserveRequest"];
      };
    };
    responses: {
      /** @description Document created, URL follows */
      201: {
        headers: {};
        content: {
          "application/json": components["schemas"]["ReserveResponse"];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
      /** @description Conflict */
      409: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
      /** @description Unprocessable Content */
      422: {
        content: {
          "application/json": {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  /**
   * Get SSE stream
   * @description Get a stream of Server-Sent Events.
   */
  SseSubscribe: {
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          /** @description File size in bytes */
          "content-length"?: string;
          /** @description Last modified data-time in RFC 2822 format */
          "last-modified"?: string;
          /** @description Entity tag */
          etag?: string;
        };
        content: {
          "": string;
        };
      };
    };
  };
}
